#!/usr/bin/python

#
# Convert all traces of (x, y) to
# (x, y, dx, dy), where dx (dy) is the
# x (y) component of the vector between adjacent points.
#
# This makes it easy to plot the points as a curve with
# vectors indicating direction.
#

import os
import sys
import time
import logging
import numpy as np
import struct
import shutil
import uuid
import re
from scipy import interpolate

# Collect all traces
all_traces = []
for f in os.listdir('.'):
  if f.startswith('trace_') and f.endswith('.bytes'):
    try:
      # This assumes float data type and 2 column format!!!
      trace_data = np.fromfile(f).reshape((-1,2))
      
    except:
      logging.exception('Failed to load %s', f)
      raise

    try:
      if len(trace_data) > 1:
        # add dx and dy
        trace_data = np.array([
            trace_data[:-1,0],
            trace_data[:-1,1],
            np.diff(trace_data[:,0]),
            np.diff(trace_data[:,1])
            ]).T
        print trace_data.shape
      else:
        # single point
        #   --> choose dx=0 and dy=.1 (arbitrarily)
        trace_data = np.array([
            trace_data[:,0],
            trace_data[:,1],
            np.array([0. ]),
            np.array([0.1]),
            ]).T
      
    except:
      logging.exception('Failed to add dx,dy columns to %s', f)
      raise

    try:
      # write out the data
      outfname = 'vectorized_' + f
      trace_data.astype(np.float).tofile(outfname + '.new')
      # replace old data atomically
      shutil.move(outfname + '.new', outfname)

    except:
      logging.exception('Failed to write out vectorized data for %s', f)
      raise

with open('vectorized_traces_updated', 'w') as f:
  f.write('1')
